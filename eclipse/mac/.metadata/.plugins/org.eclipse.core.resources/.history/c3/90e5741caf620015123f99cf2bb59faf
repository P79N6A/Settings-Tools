package com.tencent.msdk.db;

import java.util.ArrayList;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.tencent.msdk.WeGame;
import com.tencent.msdk.a.T1;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.consts.TokenType;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.tools.CommonUtil;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;

public class QQLoginModel extends BaseUserInfo implements ITbl {

	
	public QQLoginModel(String openId) {
		super(openId);
		helper = DbManager.gDefault.get();
		
	}

	public QQLoginModel() {
		super();
		helper = DbManager.gDefault.get();
	}

	// 登陆票据信息
	public String pay_token = "";
	public long pay_token_expire = 0;
	// 用户基本信息
	public String qq = "";

	// 表的列名字
	private static String col_open_id = "open_id";
	private static String col_access_token_expire = "access_token_expire";
	private static String col_access_token = "access_token";
	private static String col_pay_token = "pay_token";
	private static String col_pay_token_expire = "pay_token_expire";
	private static String col_qq = "qq";
	private static String col_nickname = "nickname";
	private static String col_age = "age";
	private static String col_avatar = "avatar";
	private static String col_gender = "gender";
	private static String col_is_active = "is_active";
	private static String col_create_at = "create_at";
	private static String col_update_at = "update_at";
	private static String col_pf = "pf";
	private static String col_pf_key = "pf_key";

	public final static String TBL_NAME = "qq_login_info";
	private DbManager helper = DbManager.gDefault.get();

	private WakeupRet mWakeupRet = null;

	public static String getCreateTblSql() {
		String createTblSql = "";
		createTblSql += "CREATE TABLE IF NOT EXISTS [" + TBL_NAME + "] (";
		createTblSql += "[" + col_open_id + "] NVARCHAR(128)  UNIQUE NOT NULL,";
		createTblSql += "[" + col_access_token_expire + "] REAL  NULL,";
		createTblSql += "[" + col_access_token + "] VARCHAR(256)  NULL,";
		createTblSql += "[" + col_pay_token + "] VARCHAR(256)  NULL,";
		createTblSql += "[" + col_pay_token_expire + "] REAL  NULL,";
		createTblSql += "[" + col_qq + "] REAL  NULL,";
		createTblSql += "[" + col_nickname + "] NVARCHAR(64)  NULL,";
		createTblSql += "[" + col_age + "] INTEGER  NULL,";
		createTblSql += "[" + col_avatar + "] VARCHAR(256)  NULL,";
		createTblSql += "[" + col_gender + "] INTEGER DEFAULT '''-1''' NULL,";
		createTblSql += "[" + col_is_active + "] BOOLEAN  NULL,";
		createTblSql += "[" + col_create_at + "] TIMESTAMP  NULL,";
		createTblSql += "[" + col_update_at
				+ "] TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,";
		createTblSql += "[" + col_pf + "] NVARCHAR(64)  NULL,";
		createTblSql += "[" + col_pf_key + "] NVARCHAR(128)  NULL";
		createTblSql += ")";
		return createTblSql;
	}

	public static String getDropTblSql() {
		return "DROP TABLE IF EXISTS " + TBL_NAME;
	}

	@Override
	public String getTableName() {
		return TBL_NAME;
	}

	public QQLoginModel getLastQQLoginUserinfo() {
		synchronized (helper) {
			QQLoginModel lastUserInfo = new QQLoginModel();
			try {
				String[] columns = null;
				String selection = null;
				String[] selectionArgs = null;
				String groupBy = null;
				String having = null;
				String orderBy = " `" + col_create_at + "` DESC ";
				String limit = " 1 ";
				SQLiteDatabase rDb = helper.getReadableDatabase();
				Cursor rows = rDb.query(TBL_NAME, columns, selection,
						selectionArgs, groupBy, having, orderBy, limit);
				if (rows.getCount() == 0) { // 没有记录
					rows.close();
					return null;
				} else {
					rows.moveToFirst();
					T1 t = new T1(gk());
					byte[] a = t.f2(getStringByName(rows,col_access_token));
					if(null != a){
						access_token = new String(a);
					}
					a = t.f2(getStringByName(rows,col_pay_token));
					if(null != a){
						pay_token = new String(a);
					}
					a = t.f2(getStringByName(rows,col_pf));
					if(null != a){
						pf =  new String(a);
					}
					a = t.f2(getStringByName(rows,col_pf_key));
					if(null != a){
						pf_key =  new String(a);
					}
					String openid = getStringByName(rows, col_open_id);
					if(!T.ckNonEmpty(access_token,pay_token,pf,pf_key)){
						lastUserInfo.access_token = (access_token == null ? ""
								: access_token);
						lastUserInfo.pay_token = (pay_token == null ? ""
								: pay_token);
						lastUserInfo.pf = (pf == null ? "" : pf);
						lastUserInfo.pf_key = (pf_key == null ? "" : pf_key);
					}
					lastUserInfo.open_id = (openid == null ? "" : openid);
					lastUserInfo.access_token_expire = getLongByName(rows,
							col_access_token_expire);
					
					lastUserInfo.pay_token_expire = getLongByName(rows,
							col_pay_token_expire);
					lastUserInfo.create_at = getLongByName(rows, col_create_at);
				}
				rows.close();
			} catch (Exception e) {
				Logger.w("getLastQQLoginUserinfo cause exception");
				helper.close();
				e.printStackTrace();
			}

			return lastUserInfo;
		}
	}

	private ContentValues getUsableContentValues() {
		ContentValues cv = new ContentValues();
		cv.put(col_open_id, this.open_id);

		T1 t = new T1(gk());
		if (!CommonUtil.ckIsEmpty(this.access_token)) {
			cv.put(col_access_token, t.func3(this.access_token.getBytes()));
			cv.put(col_access_token_expire, this.access_token_expire);
		}

		if (!CommonUtil.ckIsEmpty(this.pay_token)) {
			cv.put(col_pay_token, t.func3(this.pay_token.getBytes()));
			cv.put(col_pay_token_expire, this.pay_token_expire);
		}

		if (!CommonUtil.ckIsEmpty(this.pf)) {
			cv.put(col_pf, t.func3(this.pf.getBytes()));
		}

		if (!CommonUtil.ckIsEmpty(this.pf_key)) {
			cv.put(col_pf_key, t.func3(this.pf_key.getBytes()));
		}

		long curTime = System.currentTimeMillis();
		cv.put(col_create_at, curTime);
		return cv;
	}

	@Override
	public boolean isExisted() {
		synchronized (helper) {

			String[] columns = null;
			String selection = " " + col_open_id + " = ? ";
			String[] selectionArgs = { this.open_id };
			String groupBy = null;
			String having = null;
			String orderBy = null;
			String limit = null;

			try {
				SQLiteDatabase rDb = helper.getReadableDatabase();
				Cursor cursor = rDb.query(TBL_NAME, columns, selection,
						selectionArgs, groupBy, having, orderBy, limit);
				if (cursor.getCount() > 0) {
					cursor.close();
					return true;
				} else {
					cursor.close();
					return false;
				}
			} catch (Exception e) {
				Logger.d("isExisted error. Selection:" + selection + selectionArgs);
				helper.close();
				return true; // 发生异常返回true, 避免在此种情况下造成重复数据插入
			}
		}
	}

	@Override
	public int update() {
		synchronized (helper) {

			ContentValues values = this.getUsableContentValues();
			String whereClause = " `" + col_open_id + "` = ? ";
			String[] whereArgs = new String[] { this.open_id };
			try {
				SQLiteDatabase wDb = helper.getWritableDatabase();
				return wDb.update(TBL_NAME, values, whereClause, whereArgs);
			} catch (Exception e) {
				Logger.d("QQLoginModel update error. Selection:" + whereClause + whereArgs);
				helper.close();
				return 0;
			}
		}
	}

	@Override
	public BaseUserInfo find() {
		return null;
	}

	@Override
	public ArrayList<BaseUserInfo> findAll() {
		return null;
	}

	@Override
	public boolean save() {
		deleteAll();// 保存之前先删除表中所有记录
		boolean flag = false;
		if (isExisted()) {
			flag = this.update() > 0 ? true : false;
		} else {
			flag = this.create();
		}
		LoginManager.getInstance().resetLastQQLoginModel();
		return flag;
	}

	@Override
	public boolean create() {
		synchronized (helper) {
			try {
				SQLiteDatabase wDb = helper.getWritableDatabase();
				// insertSql, values.toArray()
				wDb.insert(TBL_NAME, null, getUsableContentValues());
				return true;
			} catch (Exception e) {
				e.printStackTrace();
				Logger.e("Insert into qq_login_info error");
				helper.close();
				return false;
			}
		}
	}

	@Override
	public int delete() {
		int howManyDeleted = 0;
		synchronized (helper) {

			String whereClause = " `" + col_open_id + "` = ? ";
			String[] whereArgs = new String[] { this.open_id };
			try {
				SQLiteDatabase wDb = helper.getWritableDatabase();
				howManyDeleted = wDb.delete(TBL_NAME, whereClause, whereArgs);
			} catch (Exception e) {
				e.printStackTrace();
				Logger.d("delete error. Selection:" + whereClause + whereArgs);
				howManyDeleted = 0;
				helper.close();
			}
		}
		// 更新内存缓存
		LoginManager.getInstance().resetLastQQLoginModel();
		return howManyDeleted;
	}

	public LoginRet convertToLoginRet() {
		LoginRet lr = new LoginRet();
		lr.open_id = this.open_id;
		lr.pf = this.pf;
		lr.pf_key = this.pf_key;

		lr.platform = WeGame.QQPLATID;
		lr.token.add(new TokenRet(TokenType.eToken_QQ_Access,
				this.access_token, this.access_token_expire));
		lr.token.add(new TokenRet(TokenType.eToken_QQ_Pay, this.pay_token,
				this.pay_token_expire));
		return lr;
	}

	@Override
	public int deleteAll() {
		int howManyDeleted = 0;
		synchronized (helper) {

			try {
				SQLiteDatabase wDb = helper.getWritableDatabase();
				howManyDeleted = wDb.delete(TBL_NAME, null, null);
			} catch (Exception e) {
				e.printStackTrace();
				Logger.d("QQLoginModel deleteAll error.");
				howManyDeleted = 0;
				helper.close();
			}
		}
		LoginManager.getInstance().resetLastQQLoginModel();
		return howManyDeleted;
	}

	public void setWakeUpRet(WakeupRet ret) {
		mWakeupRet = ret;
	}

	public WakeupRet getWakeupRet() {
		return mWakeupRet;
	}
	
	
}