package com.tencent.msdk.notice;

import java.io.File;
import java.util.HashMap;

import android.graphics.Bitmap;
import android.net.Uri;
import android.text.method.ScrollingMovementMethod;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.tencent.feedback.ua.UserAction;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.db.LoginInfoManager;
import com.tencent.msdk.stat.ReportEvent;
import com.tencent.msdk.stat.eEVENT_TYPE;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import com.tencent.msdk.webview.WebViewManager;
import com.tencent.smtt.sdk.WebSettings;
import com.tencent.smtt.sdk.WebView;
import com.tencent.smtt.sdk.WebViewClient;

/*
 * Copyright (C) 2005-2010 TENCENT Inc.All Rights Reserved.
 * FileName：BrowserWindowSP.java
 * Description：
 * History：
 * 1.0 younggao 2013-2-25 Create
 * 1.1 hardyshi 2014-03-12 
 * 弹框公告页面绘制
 */

public class AlertMsgManage extends RelativeLayout implements android.view.View.OnClickListener {
    private AlertMsgActivity mAlertAct;
    
    public AlertMsgManage(AlertMsgActivity context) {
        super(context);
        this.mAlertAct = context;
    }

    public void displayTextNotice(final NoticeInfo noticeInfo) {
        ImageView alertImage = (ImageView) this.mAlertAct.findViewById(NoticeResID.alertNoticeImage);
        alertImage.setImageResource(NoticeResID.notice_alert_drawable);
        TextView noticeTitle = (TextView) this.mAlertAct.findViewById(NoticeResID.noticeTitle);
        noticeTitle.setText(noticeInfo.mNoticeTitle);
        TextView noticeContent = (TextView)this.mAlertAct.findViewById(NoticeResID.noticeContent);
        noticeContent.setText(noticeInfo.mNoticeContent);
        noticeContent.setMovementMethod(ScrollingMovementMethod.getInstance());
        Button conformBtn = (Button) this.mAlertAct.findViewById(NoticeResID.confirmbtn);
        Button moreBtn = (Button) this.mAlertAct.findViewById(NoticeResID.morebtn);
        
        conformBtn.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
            	 closeNotice();
            }
        });
    	if(!T.ckIsEmpty(noticeInfo.mNoticeUrl)){
    		moreBtn.setOnClickListener(new OnClickListener() {
	            @Override
	            public void onClick(View v) {
	                WebViewManager.getInstance().openUrl(noticeInfo.mNoticeUrl);
	                closeNotice();
	                ReportEvent.ReportNoticeEvent(eEVENT_TYPE.eEVENT_NOTICE_MORE, noticeInfo.mNoticeId);
	            }
    		});
    	}
    	ReportEvent.ReportNoticeEvent(eEVENT_TYPE.eEVENT_NOTICE_SHOW, noticeInfo.mNoticeId);
    }
    
    public void displayImageNotice(final NoticeInfo noticeInfo) {
        ImageView alertImage = (ImageView) this.mAlertAct.findViewById(NoticeResID.alertNoticeImage);
        alertImage.setImageResource(NoticeResID.notice_alert_drawable);
        Button Conform = (Button) this.mAlertAct.findViewById(NoticeResID.confirmbtn);
        Button More = (Button) this.mAlertAct.findViewById(NoticeResID.morebtn);
        Conform.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
            	 closeNotice();
            }
        });
    	if(!T.ckIsEmpty(noticeInfo.mNoticeUrl)){
    		More.setOnClickListener(new OnClickListener() {
	            @Override
	            public void onClick(View v) {
	                WebViewManager.getInstance().openUrl(noticeInfo.mNoticeUrl);
	                closeNotice();
	                ReportEvent.ReportNoticeEvent(eEVENT_TYPE.eEVENT_NOTICE_MORE, noticeInfo.mNoticeId);
	            }
    		});
    	}
    	ImageView noticeContent = (ImageView)this.mAlertAct.findViewById(NoticeResID.noticeContent);
        if(eMSDK_SCREENDIR.eMSDK_SCREENDIR_LANDSCAPE == eMSDK_SCREENDIR.getEnum(this.mAlertAct.getResources().getConfiguration())){
            if(T.ckIsEmpty(noticeInfo.mNoticeHImgUrl)){
                Logger.e("mNoticeHImgUrl is null");
                return;
            }
            File imgFile = new File(noticeInfo.mNoticeHImgUrl);
            Uri tempUri = Uri.fromFile(imgFile);
            if(null != tempUri){
                noticeContent.setImageURI(tempUri);
            }else{
                Logger.e("Uri is null");
                return;
            }
        }else{
            if(T.ckIsEmpty(noticeInfo.mNoticeVImgUrl)){
                Logger.e("mNoticeHImgUrl is null");
                return;
            }
            File imgFile = new File(noticeInfo.mNoticeVImgUrl);
            Uri tempUri = Uri.fromFile(imgFile);
            if(null != tempUri){
                noticeContent.setImageURI(tempUri);
            }else{
                Logger.e("Uri is null");
                return;
            }
        }
        ReportEvent.ReportNoticeEvent(eEVENT_TYPE.eEVENT_NOTICE_SHOW, noticeInfo.mNoticeId);
    }
    public void displayWebNotice(final NoticeInfo noticeInfo) {
    	ImageView alertImage = (ImageView) this.mAlertAct.findViewById(NoticeResID.alertNoticeImage);
        alertImage.setImageResource(NoticeResID.notice_alert_drawable);
        Button Conform = (Button) this.mAlertAct.findViewById(NoticeResID.confirmbtn);
        Button More = (Button) this.mAlertAct.findViewById(NoticeResID.morebtn);
        final LinearLayout noticeContentLine = (LinearLayout)this.mAlertAct.findViewById(NoticeResID.noticeContentLine);
        final LinearLayout tempLoadLayer = (LinearLayout)this.mAlertAct.findViewById(NoticeResID.tempLoadLayer);
        final LinearLayout tempLoadFailed = (LinearLayout)this.mAlertAct.findViewById(NoticeResID.tempLoadFailed);
        
        Conform.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
            	 closeNotice();
            }
        });
    	if(!T.ckIsEmpty(noticeInfo.mNoticeUrl)){
    		More.setOnClickListener(new OnClickListener() {
	            @Override
	            public void onClick(View v) {
	                WebViewManager.getInstance().openUrl(noticeInfo.mNoticeUrl);
	                closeNotice();
	                ReportEvent.ReportNoticeEvent(eEVENT_TYPE.eEVENT_NOTICE_MORE, noticeInfo.mNoticeId);
	            }
    		});
    	}
    	final WebView noticeContent = (WebView)this.mAlertAct.findViewById(NoticeResID.noticeContent);
    	noticeContent.setWebViewClient(new WebViewClient() {
    		boolean isFailed = false;
    		@Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                Logger.d("shouldOverrideUrlLoading url:" + url);
                return false;
            }

            @Override
            public void onPageFinished(WebView view, String url) {
            	Logger.d("onPageFinished");
            	if(isFailed){
            		showError();
            	}else{
            		showContent();
            	}
            }
            
            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
            	Logger.d("onPageStart");
            	showLoading();
            }
            
            @Override
            public void onLoadResource(WebView view, String url){
            	Logger.d("onLoadResource");
            	showLoading();
            }
            
            @Override
            public void onReceivedError (WebView view, int errorCode, String description, String failingUrl){
            	Logger.d("onReceivedError");
            	showError();
            }
            
            public void showLoading(){
            	Logger.d("showLoading");
            	tempLoadLayer.setVisibility(VISIBLE);
                noticeContentLine.setVisibility(GONE);
                tempLoadFailed.setVisibility(GONE);
            }
            
            public void showError(){
            	Logger.d("showError");
            	noticeContent.stopLoading();  
            	tempLoadLayer.setVisibility(GONE);
                noticeContentLine.setVisibility(GONE);
                tempLoadFailed.setVisibility(VISIBLE);
                isFailed = true;
                tempLoadFailed.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View v) {
                    	noticeContent.reload();
                    	isFailed = false;
                    }
                });
            }
            
            public void showContent(){
            	Logger.d("showError");
            	tempLoadLayer.setVisibility(GONE);
                noticeContentLine.setVisibility(VISIBLE);
                tempLoadFailed.setVisibility(GONE);
            }
        });
    	WebSettings webSetting = noticeContent.getSettings();
    	webSetting.setJavaScriptEnabled(true);
    	noticeContent.loadUrl(noticeInfo.mNoticeContentWebUrl);
    	ReportEvent.ReportNoticeEvent(eEVENT_TYPE.eEVENT_NOTICE_SHOW, noticeInfo.mNoticeId);
    }

    public void closeNotice(){
    	mAlertAct.finish();
    	NoticeManager.getInstance().deleteAlertNoticeItemFromList();
    }
    public void refresh() {
        this.invalidate();
    }
    @Override
    public void onClick(View v) {

    }

	public void reportClickEvent(eEVENT_TYPE event,int notice_id){
		String name = "MSDK_NOTICE_"+event.val();
		Logger.d("Stat reportEvent name:" + name);
		HashMap<String, String> params = new HashMap<String, String>();
		NoticeRequestPara tempNoticeRequestPara = new NoticeRequestPara();
		LoginRet lr = LoginInfoManager.getInstance().getLastLoginUserInfo();
		params.put(JsonKeyConst.NOTICE_ID,String.valueOf(notice_id));
		params.put(JsonKeyConst.OS,String.valueOf(tempNoticeRequestPara.mOs));
		params.put(JsonKeyConst.PLAT_ID,String.valueOf(lr.platform));
		params.put(JsonKeyConst.OPEN_ID,tempNoticeRequestPara.mOpenId);
		params.put(JsonKeyConst.MAT_ID,NoticeManager.getInstance().getmMatId());
		params.put(JsonKeyConst.GAME_VERSION,String.valueOf(NoticeRequestPara.GAME_VERSION));
		params.put(JsonKeyConst.TRADEMARK,tempNoticeRequestPara.mTradeMark);
    	boolean isOk = true;// 事件是否成功，统计用
        long size = -1; // 事件网络消耗，统计用，byte
        UserAction.onUserAction(name, isOk, 0, size, params, true);
	}
}
