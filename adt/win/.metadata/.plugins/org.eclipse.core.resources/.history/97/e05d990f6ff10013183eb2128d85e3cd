
package com.tencent.msdk.remote.api;

import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import com.tencent.msdk.WeGame;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.api.ShareRet;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.consts.CallbackFlag;
import com.tencent.msdk.consts.ErrorCodeFlag;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.weixin.MsgWechatWrapper;

/**
 * 分享到微信游戏中心的消息中心, 以后都要使用此接口
 * 
 * @author erichua
 */
public class SendMessageToWechatGameCenter extends RemoteApiBase {
    private static final String PATH = "/share/wxgame/";
    private static final String EVENT_NAME = "sendMsgToWxGameCenter";
    private String mMsdkExtInfo = "";
    // 发出回调, 回调到全局回调的OnShareCallback
    private void callback(int flag, String msg, String extInfo) {
        ShareRet rr = new ShareRet();
        rr.flag = flag;
        rr.desc = msg;
        rr.platform = WeGame.WXPLATID;
        rr.extInfo = extInfo;
        WeGameNotifyGame.getInstance().OnBackendShareCallback(rr);
    }

    public SendMessageToWechatGameCenter(MsgWechatWrapper msg, String msdkExtInfo) {
        this.jsonBody = msg;
        this.mMsdkExtInfo = msdkExtInfo;
    }
    
    protected String getExtUrlParams() {
        return "msdkExtInfo=" + URLEncoder.encode(mMsdkExtInfo);
    }
    
    @Override
    public void onSuccess(String netContent, int statusCode, int what) {
        Logger.d("ShareWeChatGameCenter success");
        int flag = CallbackFlag.eFlag_Error;
        String msg = "unknows onSuccess";
        String extInfo = "";
        if (what != getMyId()) {
            Logger.d("a wrong callback");
            return;
        }
        if (null == netContent) { 
            Logger.d("ShareWeChatGameCenter onsuccess response data is null");
            reportEventToBeacon(EVENT_NAME, false, ErrorCodeFlag.SDK_ERROR_NETWORK_RETURN_NULL, false);
            return ;
        }
        Logger.d("onSuccess " + netContent);
        try {
            JSONObject json = new SafeJSONObject(netContent);
            int ret = json.getInt("ret");
            if (ret == 0) {
                flag = CallbackFlag.eFlag_Succ;
                reportEventToBeacon(EVENT_NAME, true, ErrorCodeFlag.SDK_SUCCESS, false);
            } else {
                Logger.d("ShareWeChatGameCenter onsuccess, ret:" + ret);
                reportEventToBeacon(EVENT_NAME, false, ret, true);
            }
            extInfo = json.getString("msdkExtInfo");
            if(extInfo != null) {
                extInfo = URLDecoder.decode(extInfo);
            }
            Logger.d("extInfo: " + extInfo);
            msg = getNetDesc(json, this.getClass().getName());
        } catch (JSONException e) {
            e.printStackTrace();
            Logger.d("json error(ShareToWX): " + netContent + " statusCode: "
                    + statusCode);
            reportEventToBeacon(EVENT_NAME, false, ErrorCodeFlag.SDK_ERROR_JSON_VALUES, false);
        } finally {
            callback(flag, msg, extInfo);
        }
    }

    @Override
    public void onFailure(String errorContent, int statusCode, int what) {
        Logger.d("ShareWeChatGameCenter failed");
        if (what != getMyId()) {
            Logger.d("a wrong callback");
            return;
        }

        Logger.d("onFailure " + errorContent + " statusCode: " + statusCode);
        callback(CallbackFlag.eFlag_Error, errorContent, this.mMsdkExtInfo);
        reportEventToBeacon(EVENT_NAME, false, statusCode, false);
    }

    @Override
    protected int getMyId() {
        return RemoteApiWhat.ShareWeChatGameCenter.ordinal();
    }

    @Override
    protected String getPath() {
        return PATH;
    }
}
