package com.tencent.msdk.request;

import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import org.json.JSONException;
import org.json.JSONObject;

import com.tencent.msdk.WeGame;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.communicator.HttpRequestManager;
import com.tencent.msdk.communicator.IHttpRequestListener;
import com.tencent.msdk.communicator.UrlManager;
import com.tencent.msdk.consts.CallbackFlag;
import com.tencent.msdk.consts.EPlatform;
import com.tencent.msdk.consts.ErrorCodeFlag;
import com.tencent.msdk.consts.MessageNo;
import com.tencent.msdk.consts.RequestConst;
import com.tencent.msdk.consts.TokenType;
import com.tencent.msdk.db.LoginInfoManager;
import com.tencent.msdk.db.QQLoginModel;
import com.tencent.msdk.db.WxLoginModel;
import com.tencent.msdk.myapp.whitelist.WhiteListMng;
import com.tencent.msdk.permission.PermissionManage;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.remote.api.SafeJSONObject;
import com.tencent.msdk.stat.BeaconHelper;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.SharedPreferencesTool;

/*
 * 获得pfkey 请求管理
 * */
public class PfKeyRequestMng implements IHttpRequestListener {
	public static final String PT_EXPIRED_KEY = "paytoken_expire_time";
	// 通知类型, login? share?wakeup?
	private int notifyState = RequestConst.notifyNone; 
	private long refreshStartTime = 0;
	
	private WakeupRet currentWakeUp = new WakeupRet();
	// 回调 msg
	private String callbackMsg = "";
	private QQLoginModel tmpLoginInfoFromClient; 

	public String getLocalTokenByType(int type, Vector<TokenRet> token) {
		for (TokenRet tr : token) {
			if (tr.type == type) {
				return tr.value;
			}
		}
		return null;
	}

	public void getPfKeyReq(int notifywakeup, WakeupRet wakeup) {
		this.currentWakeUp = wakeup;
		this.getPfKeyReq(notifywakeup);
	}

	public void getPfKeyReq(int notifyState) {
    	getPfKeyReq(notifyState, MessageNo.MSG_NO_GET_PFKEY);
    }

    // 手Q登录回来以后去拿pfkey走这个请求
	public void getQQFirstLoginPfKeyReq(QQLoginModel qlm) {
        if (qlm == null) {
            notify(false,"QQ Client Login Return NULL", CallbackFlag.eFlag_Error);
            return;
        }

		this.tmpLoginInfoFromClient = qlm;
        this.notifyState = RequestConst.notifyLogin;
        refreshStartTime = System.currentTimeMillis();

        PfKeyRequest loginReq = new PfKeyRequest();
        String appId = WeGame.getInstance().qq_appid;
        String channel = WGPfManager.getInstance().getChannelId();
        String openId = qlm.open_id;
        String openKey = "";
        openKey = qlm.pay_token;
        int loginPlatform = WeGame.QQPLATID;
        WeGame.getInstance().setPlatId(loginPlatform);
        Logger.d("updateLoginInfo1:"+WeGame.getInstance().getPlatId());
        String platformId = WGPfManager.getInstance().getPlatformId();
        String offerId = WeGame.getInstance().offerId;

        JSONObject json = loginReq.getReqJson(openId, openKey, appId, channel, offerId, platformId, loginPlatform);
        String url = UrlManager.getUrl(HttpRequestManager.PFKEY_ACTION, loginPlatform);
        Logger.d(url);
        new HttpRequestManager(this).postTextAsync(url, json.toString(), MessageNo.MSG_NO_GET_QQ_FIRST_LOGIN_PFKEY);
	}


    public void getPfKeyReq(int notifyState, int msgNo) {
		this.notifyState = notifyState;
		LoginRet lr = LoginInfoManager.getInstance().getLastLoginUserInfo();
		if (lr.platform == EPlatform.ePlatform_None.val()) {
			Logger.d("getPfKeyReq no record in db\n");
			notify(false, "getPfKeyReq no record in db", -1);
			return;
		}

		refreshStartTime = System.currentTimeMillis();
		PfKeyRequest loginReq = new PfKeyRequest();
		String channel = WGPfManager.getInstance().getChannelId();
		int flag = 0;
		String openId = lr.open_id;
		String openKey = "";

		String appId = "";
		if (lr.platform == WeGame.QQPLATID) {
			flag = WeGame.QQPLATID;
			openKey = getLocalTokenByType(TokenType.eToken_QQ_Pay, lr.token);
		    appId = WeGame.getInstance().qq_appid;
		} else if (lr.platform == WeGame.WXPLATID) {
			flag = WeGame.WXPLATID;
			openKey = getLocalTokenByType(TokenType.eToken_WX_Access, lr.token); 
			appId = WeGame.getInstance().wx_appid;
		} else {
		    Logger.w("no login record");
			return; 
			// 未登录时 直接返回
		}

		WeGame.getInstance().setPlatId(flag);
		String platformId = WGPfManager.getInstance().getPlatformId();
		String offerId = WeGame.getInstance().offerId;

		JSONObject json = loginReq.getReqJson(openId, openKey, appId, channel, offerId, platformId, flag);
		String url = UrlManager.getUrl(HttpRequestManager.PFKEY_ACTION, flag);
		Logger.d(url);
        new HttpRequestManager(this).postTextAsync(url, json.toString(), msgNo);
	}

	private void notify(boolean isOk, String content, int statusCode) {
		callbackMsg = " content: " + content + " statusCode: " + statusCode;
		if (this.notifyState == RequestConst.notifyLogin) {
			notifyLogin(isOk);
		} else if (this.notifyState == RequestConst.notifyWakeup) {
			notifyWakup(isOk);
		}
	}

	private void notifyLogin(boolean isOk) {
		LoginRet loginRet = LoginInfoManager.getInstance()
				.getLastLoginUserInfo();
		if (true == isOk) {
			loginRet.flag = CallbackFlag.eFlag_Succ;
			loginRet.desc = WeGame.setDescribe(CallbackFlag.eFlag_Succ,
					loginRet.platform);
		} else {
			loginRet.flag = CallbackFlag.eFlag_Error;
			loginRet.desc = "登陆获取pf失败";
		}
		loginRet.desc += " cb:" + callbackMsg;
		Logger.d("notifyLogin flag = " + loginRet.flag + " desc = "
				+ loginRet.desc);
		WeGameNotifyGame.getInstance().OnPlatformLoginNotify(loginRet);
	}

	// 不需要判断pf是否成功, 即使更新pf失败, 还是应该要告诉游戏
	private void notifyWakup(boolean isOk) { 
		WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(currentWakeUp);
	}

	private void updateLoginInfo(PfKeyResponse rspFromLogin) {
		long curTime = System.currentTimeMillis() / 1000; 
		Logger.d("updateLoginInfo:"+WeGame.getInstance().getPlatId());
		if (WeGame.QQPLATID == WeGame.getInstance().getPlatId()) {
            if (null == tmpLoginInfoFromClient) {
				Logger.d("updateLoginInfo error null == qqloginRecord !!!");
				return;
			}
			
            tmpLoginInfoFromClient.pf = rspFromLogin.pf;
            tmpLoginInfoFromClient.pf_key = rspFromLogin.pfKey;
            Logger.d("rspFromLogin.paytokenExpire: " + rspFromLogin.paytokenExpire);
			if (rspFromLogin.paytokenExpire > 0) {
				tmpLoginInfoFromClient.pay_token_expire = curTime + rspFromLogin.paytokenExpire; // 绝对时间 替换paytoken 时间
				SharedPreferencesTool.putInt(WeGame.getInstance().getActivity(), PT_EXPIRED_KEY, (int) rspFromLogin.paytokenExpire);
			}
            tmpLoginInfoFromClient.save();
            WeGame.getInstance().setOpenSdkLoginInfo(tmpLoginInfoFromClient.open_id, tmpLoginInfoFromClient.access_token,
            		tmpLoginInfoFromClient.access_token_expire);
		} else if (WeGame.WXPLATID == WeGame.getInstance().getPlatId()) {
			WxLoginModel wxloginRecord = new WxLoginModel()
					.getLastLoginUserInfo();
			if (null == wxloginRecord) {
				Logger.d("updateLoginInfo error null == qqloginRecord !!!");
				return;
			}

			wxloginRecord.pf = rspFromLogin.pf;
			wxloginRecord.pf_key = rspFromLogin.pfKey;
			wxloginRecord.save();
		}
		WGPfManager.getInstance().setRegChannelId(rspFromLogin.regChannel);
		PermissionManage.getInstance().updateDataFromNet(
				rspFromLogin.permission);// 权限管理
	}

	@Override
	public void onFailure(String errorContent, int statusCode, int what) {
	    reportEventToBeacon(what, false, statusCode, false);
		if (null != errorContent)
			Logger.d("errorContent:" + errorContent + " statusCode: "
					+ statusCode);

		notify(false, errorContent, what);
	}

	private void reportEventToBeacon(int what, boolean success, int errCode, boolean isLogicError) {
        if(success) {
            if(MessageNo.MSG_NO_GET_QQ_FIRST_LOGIN_PFKEY == what){
                BeaconHelper.reportMSDKEvent("qqFirstLoginPfKeyReq", refreshStartTime, true, null, true);
            } else if(MessageNo.MSG_NO_GET_PFKEY == what){
                BeaconHelper.reportMSDKEvent("getPfKeyReqWithWakeup", refreshStartTime, true, null, true);
            }
        } else {
            if(MessageNo.MSG_NO_GET_QQ_FIRST_LOGIN_PFKEY == what){
                Map<String, String> map = new HashMap<String, String>();
                map.put("param_FailCode", "" + errCode);
                map.put("msdk_logic_error", "" + (isLogicError ? 1 : 0));
                BeaconHelper.reportMSDKEvent("qqFirstLoginPfKeyReq", refreshStartTime, false, map, true);
            } else if(MessageNo.MSG_NO_GET_PFKEY == what){
                Map<String, String> map = new HashMap<String, String>();
                map.put("param_FailCode", "" + errCode);
                map.put("msdk_logic_error", "" + (isLogicError ? 1 : 0));
                BeaconHelper.reportMSDKEvent("getPfKeyReqWithWakeup", refreshStartTime, false, map, true);
            }
        }
    }
	
	@Override
	public void onSuccess(String netContent, int statusCode, int what) {
		String content = "";
        if (what == MessageNo.MSG_NO_GET_PFKEY || MessageNo.MSG_NO_GET_QQ_FIRST_LOGIN_PFKEY == what) {
			PfKeyResponse rspFromLogin = new PfKeyResponse();
			if (null == netContent) { /* 防止 */
				Logger.d("PfKeyRequestMng what:" + what + ", http onSuccess but response no params, statusCode :"
						+ statusCode);
				notify(false, "response no params", statusCode);
				reportEventToBeacon(what, false, ErrorCodeFlag.SDK_ERROR_NETWORK_RETURN_NULL, false);
				return;
			}
			try {
				JSONObject json = new SafeJSONObject(netContent);
				rspFromLogin.parseJson(json);
				content = rspFromLogin.msg;
				if (rspFromLogin.ret == 0) {
				    reportEventToBeacon(what, true, ErrorCodeFlag.SDK_SUCCESS, false);
				    // 权限管理
					PermissionManage.getInstance().updateDataFromNet(rspFromLogin.permission);
					
                	// 如果是QQ首次登录的，需要考虑是否查询白名单
                    if (MessageNo.MSG_NO_GET_QQ_FIRST_LOGIN_PFKEY == what
                    		&& WhiteListMng.gDefault.get().needQueryWhiteList()) {
                    	if (tmpLoginInfoFromClient == null) {
                    		notify(false, content, statusCode);
                    		return;
                    	}

                    	tmpLoginInfoFromClient.pf = rspFromLogin.pf;
                    	tmpLoginInfoFromClient.pf_key = rspFromLogin.pfKey;
    					WhiteListMng.gDefault.get().setTmpQQLoginInfo(tmpLoginInfoFromClient);
    					WhiteListMng.gDefault.get().queryUserWhiteListAsync(WeGame.QQPLATID, tmpLoginInfoFromClient.open_id, tmpLoginInfoFromClient.access_token); // 查询结果在onAuthorizedFinished里面
    					return;
    				} else {
						updateLoginInfo(rspFromLogin);
    					notify(true, content, statusCode);
    				}
                } else {
                    Logger.d("onSuccess error ret:" + rspFromLogin.ret + " ret: " + rspFromLogin.msg);
                    // MSDK服务端定义的错误
                    reportEventToBeacon(what, false, rspFromLogin.ret, true);
                    notify(false,content,statusCode);
				}
			} catch (JSONException e) {
				e.printStackTrace();
                notify(false,content,statusCode);
                reportEventToBeacon(what, false, ErrorCodeFlag.SDK_ERROR_JSON_VALUES, false);
			}
		}
	}
}
