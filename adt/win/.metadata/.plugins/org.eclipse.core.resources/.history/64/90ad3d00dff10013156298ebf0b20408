package com.tencent.msdk.tools;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Queue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import com.tencent.msdk.stat.ReportEvent;
import com.tencent.msdk.stat.eEVENT_TYPE;

import android.os.Handler;
import android.os.Message;

/**
 * @author hardyshi 2014-06-01(一个年轻的程序猿写于六一国际儿童节)
 * 
 *     批量下载进程模块
 */
public class DownloadThread extends Thread {

	// 开始下载
	public final static int THREAD_BEGIN = 1;
	// 下载结束，图片正确
	public final static int THREAD_FINISHED_SUCC = 2;
	// 下载结束，图片错误
	public final static int THREAD_FINISHED_FAIL = 3;
	// 下载进度
	private float mPercent = 0;
	// 下载路径
	private URL mFileUrl;
	// 要下载文件的hash值
	private String mHashValue;
	// 下载的文件大小
	private long mFileLength;
	// 文件的保存路径
	private String mLocalFilePath;
	// 是否线程已启动
	private boolean mIsStarted = false;
	// 线程锁
	private static Lock lock = new ReentrantLock();
	// 任务集合
	private static Queue<DownloadThread> threads = new LinkedList<DownloadThread>();
	
	private static Handler mHandler;

	public DownloadThread(URL url, String filePath,String hashValue) {
		this.mFileUrl = url;
		this.mLocalFilePath = filePath;
		this.mHashValue = hashValue;
	}

	
	public static void addToDownloadQueue(URL url, String filePath,String hashValue) {
		if(null == url || T.ckIsEmpty(filePath) || T.ckIsEmpty(hashValue)){
			Logger.w("url or filePath or hashValue is null");
			return ;
		}
			lock.lock();
			DownloadThread tempDownloadThread = new DownloadThread(url,filePath,hashValue);
			if(!threads.contains(tempDownloadThread)){
				threads.add(tempDownloadThread);
			}
			lock.unlock();
		Message message = new Message();
		message.what = DownloadThread.THREAD_BEGIN;
		myHandler.sendMessage(message);
	}

	
	// 开始下载任务
	@Override
	public void run() {
		mIsStarted = true;
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			HttpURLConnection conn = (HttpURLConnection) this.mFileUrl
					.openConnection(); // 建立一个远程连接句柄，此时尚未真正连接
			conn.setConnectTimeout(5 * 1000); // 设置连接超时时间为5秒
			conn.setRequestMethod("GET"); // 设置请求方式为GET
			conn.setRequestProperty(
					"Accept",
					"image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*");
			conn.setRequestProperty("Charset", "UTF-8"); // 设置客户端编码
			conn.setRequestProperty(
					"User-Agent",
					"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"); // 设置用户代理
			conn.setRequestProperty("Connection", "Keep-Alive"); // 设置Connection的方式
			conn.connect(); // 和远程资源建立真正的连接，但尚无返回的数据流

			this.mFileLength = conn.getContentLength();
			byte[] buffer = new byte[4096]; // 下载的缓冲池为4KB

			bis = new BufferedInputStream(conn.getInputStream());
			bos = new BufferedOutputStream(new FileOutputStream(new File(
					this.mLocalFilePath)));

			long downloadLength = 0;// 当前已下载的文件大小
			int bufferLength = 0;
			MessageDigest md5 = MessageDigest.getInstance("MD5");
			String picMd5 = "";
			while ((bufferLength = bis.read(buffer)) != -1) {
				bos.write(buffer, 0, bufferLength);
				md5.update(buffer, 0, bufferLength);
				bos.flush();
				// 计算当前下载进度
				downloadLength += bufferLength;
				this.mPercent = downloadLength / this.mFileLength;
			}
			byte[] bs = md5.digest();
			picMd5 = HexUtil.bytes2HexStr(bs).toLowerCase(Locale.CHINA);
			//下载完成，对比md5
			Message msg = new Message();
			if(picMd5.equalsIgnoreCase(this.mHashValue)){
				msg.what = THREAD_FINISHED_SUCC;
			}else{
				msg.what = THREAD_FINISHED_FAIL;
				Logger.w("picMd5:"+picMd5+";hashValue:"+this.mHashValue);
				ReportEvent.ReportNoticeEvent(eEVENT_TYPE.eEVENT_NOTICE_MORE, noticeInfo.mNoticeId);
				delFileByPath(this.mLocalFilePath);
			}
			// 发送下载完毕的消息
			DownloadThread.mHandler.sendMessage(msg);
		} catch (Exception e) {
			e.printStackTrace();
			// 这里处理下载失败（建议发送下载失败的消息）
		} finally {
			try {
				if (bis != null) {
					bis.close();
				}
				if (bos != null) {
					bos.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public URL getUrl() {
		return this.mFileUrl;
	}

	public float getPercent() {
		return this.mPercent;
	}

	public boolean isStarted() {
		return this.mIsStarted;
	}

	public static void delFileByPath(String filePath){
		if(T.ckIsEmpty(filePath)){
			return ;
		}
		File tempPicFile = new File(filePath);
		if(null != tempPicFile){
			tempPicFile.delete();
		}
	}
	private static Handler myHandler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case DownloadThread.THREAD_BEGIN:
				lock.lock();
				if (!threads.isEmpty()) {
					DownloadThread tempDownloadThread = threads.poll();
					if (!tempDownloadThread.isStarted()) {
						tempDownloadThread.start();
					}
				} else {
					// Logger("无任务了");
				}
				lock.unlock();
				break;
			case DownloadThread.THREAD_FINISHED_SUCC:
				lock.lock();
				if (!threads.isEmpty()) {
					// 开始下一个任务
					Message message = new Message();
					message.what = DownloadThread.THREAD_BEGIN;
					sendMessage(message);
				}
				lock.unlock();
				break;
			case DownloadThread.THREAD_FINISHED_FAIL:
				lock.lock();
				if (!threads.isEmpty()) {
					// 开始下一个任务
					Message message = new Message();
					message.what = DownloadThread.THREAD_BEGIN;
					sendMessage(message);
				}
				lock.unlock();
				break;
			}
		}

	};

}